ARM GAS  /tmp/ccLYn57S.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"task_sync.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.task1.str1.4,"aMS",%progbits,1
  20              		.align	2
  21              	.LC0:
  22 0000 48656C70 		.ascii	"Help\000"
  22      00
  23              		.section	.text.task1,"ax",%progbits
  24              		.align	1
  25              		.global	task1
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  30              	task1:
  31              	.LVL0:
  32              	.LFB0:
  33              		.file 1 "Source/task_sync.c"
   1:Source/task_sync.c **** /*
   2:Source/task_sync.c ****  * Indigo Team
   3:Source/task_sync.c ****  * Embedded Systems Milestone 4
   4:Source/task_sync.c ****  * 03.22.22
   5:Source/task_sync.c ****  * Task Synchronization applet for Milestone 4.
   6:Source/task_sync.c ****  */
   7:Source/task_sync.c **** 
   8:Source/task_sync.c **** // INCLUDEs go here  (First include the main esos.h file)
   9:Source/task_sync.c **** //      After that, the user can include what they need
  10:Source/task_sync.c **** #include    "esos.h"
  11:Source/task_sync.c **** #ifdef __linux
  12:Source/task_sync.c **** #include    "esos_pc.h"
  13:Source/task_sync.c **** #include    "esos_pc_stdio.h"
  14:Source/task_sync.c **** // INCLUDE these so our printf and other PC hacks work
  15:Source/task_sync.c **** #include <stdio.h>
  16:Source/task_sync.c **** #include <sys/select.h>
  17:Source/task_sync.c **** #include <termios.h>
  18:Source/task_sync.c **** #include <unistd.h>
  19:Source/task_sync.c **** #else
  20:Source/task_sync.c **** #include    "esos_stm32l4.h"
  21:Source/task_sync.c **** #include    "esos_stm32l4_rs232.h"
  22:Source/task_sync.c **** #endif
  23:Source/task_sync.c **** #include "task_sync.h"
  24:Source/task_sync.c **** 
ARM GAS  /tmp/ccLYn57S.s 			page 2


  25:Source/task_sync.c **** ESOS_USER_TASK(task1){
  34              		.loc 1 25 22 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		.loc 1 25 22 is_stmt 0 view .LVU1
  39 0000 08B5     		push	{r3, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
  43              		.cfi_offset 14, -4
  26:Source/task_sync.c ****     ESOS_TASK_BEGIN();
  44              		.loc 1 26 5 is_stmt 1 view .LVU2
  45 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  46 0004 63F07F03 		orn	r3, r3, #127
  47 0008 8370     		strb	r3, [r0, #2]
  48              		.loc 1 26 5 view .LVU3
  49 000a 0388     		ldrh	r3, [r0]
  50 000c 1BB9     		cbnz	r3, .L2
  51              	.LVL1:
  52              	.L3:
  53              		.loc 1 26 22 discriminator 1 view .LVU4
  27:Source/task_sync.c **** 
  28:Source/task_sync.c ****     while(true)
  54              		.loc 1 28 5 discriminator 1 view .LVU5
  29:Source/task_sync.c ****         __esos_unsafe_PutString("Help");
  55              		.loc 1 29 9 discriminator 1 view .LVU6
  56 000e 0548     		ldr	r0, .L5
  57 0010 FFF7FEFF 		bl	__esos_unsafe_PutString
  58              	.LVL2:
  28:Source/task_sync.c ****         __esos_unsafe_PutString("Help");
  59              		.loc 1 28 10 discriminator 1 view .LVU7
  60 0014 FBE7     		b	.L3
  61              	.LVL3:
  62              	.L2:
  30:Source/task_sync.c **** 
  31:Source/task_sync.c ****     ESOS_TASK_END();
  63              		.loc 1 31 5 view .LVU8
  64              		.loc 1 31 5 view .LVU9
  65 0016 0823     		movs	r3, #8
  66 0018 8370     		strb	r3, [r0, #2]
  67              		.loc 1 31 5 view .LVU10
  68 001a 0023     		movs	r3, #0
  69 001c 0380     		strh	r3, [r0]	@ movhi
  70              		.loc 1 31 5 view .LVU11
  71              		.loc 1 31 5 view .LVU12
  72              		.loc 1 31 5 view .LVU13
  73              		.loc 1 31 20 view .LVU14
  32:Source/task_sync.c **** }
  74              		.loc 1 32 1 is_stmt 0 view .LVU15
  75 001e 0320     		movs	r0, #3
  76              	.LVL4:
  77              		.loc 1 32 1 view .LVU16
  78 0020 08BD     		pop	{r3, pc}
  79              	.L6:
  80 0022 00BF     		.align	2
  81              	.L5:
ARM GAS  /tmp/ccLYn57S.s 			page 3


  82 0024 00000000 		.word	.LC0
  83              		.cfi_endproc
  84              	.LFE0:
  86              		.section	.text.user_init,"ax",%progbits
  87              		.align	1
  88              		.global	user_init
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  93              	user_init:
  94              	.LFB1:
  33:Source/task_sync.c **** 
  34:Source/task_sync.c **** void user_init(void){
  95              		.loc 1 34 21 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
  35:Source/task_sync.c ****     esos_RegisterTask(task1);
 104              		.loc 1 35 5 view .LVU18
 105 0002 0248     		ldr	r0, .L9
 106 0004 FFF7FEFF 		bl	esos_RegisterTask
 107              	.LVL5:
  36:Source/task_sync.c **** }
 108              		.loc 1 36 1 is_stmt 0 view .LVU19
 109 0008 08BD     		pop	{r3, pc}
 110              	.L10:
 111 000a 00BF     		.align	2
 112              	.L9:
 113 000c 00000000 		.word	task1
 114              		.cfi_endproc
 115              	.LFE1:
 117              		.text
 118              	.Letext0:
 119              		.file 2 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 120              		.file 3 "/home/ryan/Documents/Gitlab/embedded-systems-development-milestones/ARM/gcc-arm-none-eabi
 121              		.file 4 "/home/ryan/Documents/Github/esos32/include/lc-switch.h"
 122              		.file 5 "/home/ryan/Documents/Github/esos32/include/esos_cb.h"
 123              		.file 6 "/home/ryan/Documents/Github/esos32/include/esos_mail.h"
 124              		.file 7 "/home/ryan/Documents/Github/esos32/include/esos_task.h"
 125              		.file 8 "/home/ryan/Documents/Github/esos32/include/esos.h"
 126              		.file 9 "/home/ryan/Documents/Github/esos32/include/esos_comm.h"
ARM GAS  /tmp/ccLYn57S.s 			page 4


DEFINED SYMBOLS
                            *ABS*:0000000000000000 task_sync.c
     /tmp/ccLYn57S.s:20     .rodata.task1.str1.4:0000000000000000 $d
     /tmp/ccLYn57S.s:24     .text.task1:0000000000000000 $t
     /tmp/ccLYn57S.s:30     .text.task1:0000000000000000 task1
     /tmp/ccLYn57S.s:82     .text.task1:0000000000000024 $d
     /tmp/ccLYn57S.s:87     .text.user_init:0000000000000000 $t
     /tmp/ccLYn57S.s:93     .text.user_init:0000000000000000 user_init
     /tmp/ccLYn57S.s:113    .text.user_init:000000000000000c $d

UNDEFINED SYMBOLS
__esos_unsafe_PutString
esos_RegisterTask
